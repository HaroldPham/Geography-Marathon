package main;
/*
 * Authors: Harold Pham and Kevin Xu
 * File Detail: This main class will facilitate JFrame mechanics and file reading.
 * Creation date: 9/2/2020
 */
import java.util.*;
import java.awt.*;
import javax.swing.*;
import java.io.*;
import java.awt.event.*;
//Removed extra imports because the ones above suffice.


public class GeographyMain {
	private static ArrayList<String> Africa;
	private static ArrayList<String> Europe;
	private static ArrayList<String> NorthAmerica;
	private static ArrayList<String> SouthAmerica;
	private static ArrayList<String> Australia;
	private static ArrayList<String> Asia;
	private static Scanner scan;
	public static void main(String[] args) 
	{
		//JFrame setup
		JFrame frame = new JFrame("Geography Name Game"); //Create the frame
		frame.setIconImage(Toolkit.getDefaultToolkit().getImage("GNG Logo.jpg"));
				
		//Set up the frame
		frame.setPreferredSize(new Dimension(800,600)); //Create a dimension object to fit into the size of the window
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Make it closable
		frame.setResizable(true); //No resizing
		frame.setAlwaysOnTop(true); //Keep it above other windows for programming purposes
		frame.setVisible(true); //Visibility
		frame.pack();
				
		JLabel title = new JLabel("Welcome to the Geography Game!");
		title.setFont(new Font("Arial", Font.PLAIN, 48));
		JPanel p = new JPanel();		
		p.add(title);
				
		frame.getContentPane().add(p,SwingConstants.CENTER);

		frame.pack();
				
		
		
		//Button work
		Container pane = frame.getContentPane(); //Get the windows interaction space
		pane.setLayout(new SpringLayout()); //Get a layout manager preset to use (SpringLayout)

		JPanel test = new JPanel(); //Make a JPanel to hold all our components/buttons
		
		//Buttons to add
		JButton m = new JButton("Marathon");   
		JButton t = new JButton("Timed");
		JButton q = new JButton("Quiz");
		
		//Add buttons
		pane.add(m);
		pane.add(t);
		pane.add(q);
		
		//Execute the layout 
		SpringUtilities.makeCompactGrid(test, 1, test.getComponentCount(), 400, 100, 100, 100);
		
		
		
		/*
		//enter name label
		JLabel label = new JLabel();        
		label.setText("Choose:");
		label.setBounds(200, 400, 100, 100);
		//empty label which will show event after button clicked
		JLabel label1 = new JLabel("Timed");
		label1.setBounds(600, 400, 100, 100);
		
		
		
		//textfield to enter name
		JTextField textfield= new JTextField();
		textfield.setBounds(110, 50, 130, 30);
		
		
		//add to frame
		frame.add(label1);
		//frame.add(textfield);
		frame.add(label);
		*/
		
		frame.getContentPane().add(p); //Add the pane to the window so that it will show
		frame.pack(); //Pack them into that resolution screen
		
		/*
		//action listener
		b.addActionListener(new ActionListener() {

		public void actionPerformed(ActionEvent arg0) {
			label1.setText("Name has been submitted.");                
		 }          
			});
		*/
		
		
		
				  /*
				   JFrame f=new JFrame("Button Example"); 
         //submit button
			JButton b=new JButton("Submit");    
			b.setBounds(100,100,140, 40);    
			         //enter name label
			JLabel label1 = new JLabel();        
			label1.setText("Enter Name :");
			label1.setBounds(10, 10, 100, 100);
			         //empty label which will show event after button clicked
			JLabel label11 = new JLabel();
			label11.setBounds(10, 110, 200, 100);
			         //textfield to enter name
			JTextField textfield= new JTextField();
			textfield.setBounds(110, 50, 130, 30);
			         //add to frame
			f.add(label11);
			f.add(textfield);
			f.add(label11);
			f.add(b);    
			f.setSize(300,300);    
			f.setLayout(null);    
			f.setVisible(true);    
			f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			b.addActionListener(new ActionListener() {
	            
	            @Override
	            public void actionPerformed(ActionEvent arg0) {
	                    label1.setText("Name has been submitted.");                
	            }          
	          });
				  */        		
				//Import the files into the ArrayLists
				processFile("Africa");
				processFile("Europe");
				processFile("Asia");
				processFile("NorthAmerica");
				processFile("SouthAmerica");
				processFile("Australia");
				Scanner keyboardInput = new Scanner (System.in);
		 System.out.println("Which continent would you like to attempt?");
		 String name = keyboardInput.nextLine();
				
	}
	
	//Will process the ArrayLists for each continent
	public static void processFile(String name)
	{
		  if (name == "Africa") //Africa
		  {
			  Africa = new ArrayList<String>();
			  try 
			  {
				 File inFile = new File("Africa.txt");
				 scan = new Scanner (inFile);
				 while(scan.hasNextLine()) 
				 {
					 Africa.add(scan.nextLine());
				 }
				 
			  } 
			  catch (Exception ex) 
			  {
				 System.out.println("Error found in input file.");
			  }
		  }
		  else if (name == "Europe") //Europe
		  {
			  Europe = new ArrayList<String>();
			  try 
			  {
				 File inFile = new File("Europe.txt");
				 scan = new Scanner (inFile);
				 while(scan.hasNextLine()) 
				 {
					 Europe.add(scan.nextLine());
				 }
				 
			  } 
			  catch (Exception ex) 
			  {
				 System.out.println("Error found in input file.");
			  }
		  }
		  else if (name == "NorthAmerica") //North America
		  {
			  NorthAmerica = new ArrayList<String>();
			  try 
			  {
				 File inFile = new File("NorthAmerica.txt");
				 scan = new Scanner (inFile);
				 while(scan.hasNextLine()) 
				 {
					 NorthAmerica.add(scan.nextLine());
				 }
				 
			  } 
			  catch (Exception ex) 
			  {
				 System.out.println("Error found in input file.");
			  }
		  }
		  else if (name == "SouthAmerica") //South America
		  {
			  SouthAmerica = new ArrayList<String>();
			  try 
			  {
				 File inFile = new File("SouthAmerica.txt");
				 scan = new Scanner (inFile);
				 while(scan.hasNextLine()) 
				 {
					 SouthAmerica.add(scan.nextLine());
				 }
				 
			  } 
			  catch (Exception ex) 
			  {
				 System.out.println("Error found in input file.");
			  }
		  }
		  else if (name == "Asia") //Asia
		  {
			  Asia = new ArrayList<String>();
			  try 
			  {
				 File inFile = new File("Asia.txt");
				 scan = new Scanner (inFile);
				 while(scan.hasNextLine()) 
				 {
					 Asia.add(scan.nextLine());
				 }
				 
			  } 
			  catch (Exception ex) 
			  {
				 System.out.println("Error found in input file.");
			  }
		  }
		  else if (name == "Australia") //Australia
		  {
			  Australia = new ArrayList<String>();
			  try 
			  {
				  File inFile = new File("Australia.txt");
				  scan = new Scanner (inFile);
				  while(scan.hasNextLine()) 
				  {
					  Australia.add(scan.nextLine());
				  }
				 
			  } 
			  catch (Exception ex) 
			  {
				  System.out.println("Error found in input file.");
			  }
		  }
		  else
		  {
		  	System.out.println("That is not a valid option. Please refresh and try again.");
		  }
	}

}

/*
class RoundButton extends JButton {
  public RoundButton() {
    this(null, null);
  }
  public RoundButton(Icon icon) {
    this(null, icon);
  }
  public RoundButton(String text) {
    this(text, null);
  }
  public RoundButton(Action a) {
    this();
    setAction(a);
  }
  public RoundButton(String text, Icon icon) {
    setModel(new DefaultButtonModel());
    init(text, icon);
    if(icon==null) {
      return;
    }
    setBorder(BorderFactory.createEmptyBorder(1,1,1,1));
    setBackground(Color.BLACK);
    setContentAreaFilled(false);
    setFocusPainted(false);
    //setVerticalAlignment(SwingConstants.TOP);
    setAlignmentY(Component.TOP_ALIGNMENT);
    initShape();
  }
  protected Shape shape, base;
  protected void initShape() {
    if(!getBounds().equals(base)) {
      Dimension s = getPreferredSize();
      base = getBounds();
      shape = new Ellipse2D.Float(0, 0, s.width-1, s.height-1);
    }
  }
  @Override public Dimension getPreferredSize() {
    Icon icon = getIcon();
    Insets i = getInsets();
    int iw = Math.max(icon.getIconWidth(), icon.getIconHeight());
    return new Dimension(iw+i.right+i.left, iw+i.top+i.bottom);
  }
  @Override protected void paintBorder(Graphics g) {
    initShape();
    Graphics2D g2 = (Graphics2D)g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
    g2.setColor(getBackground());
    //g2.setStroke(new BasicStroke(1.0f));
    g2.draw(shape);
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_OFF);
  }
  @Override public boolean contains(int x, int y) {
    initShape();
    return shape.contains(x, y);
    //or return super.contains(x, y) && ((image.getRGB(x, y) >> 24) & 0xff) > 0;
  }
}
*/
